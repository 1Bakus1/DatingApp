{"remainingRequest":"E:\\Bakun\\ProjektASPNET\\Projekt1\\DatingApp\\DatingApp-SPA\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\Bakun\\ProjektASPNET\\Projekt1\\DatingApp\\DatingApp-SPA\\node_modules\\ngx-bootstrap\\typeahead\\typeahead-utils.js","dependencies":[{"path":"E:\\Bakun\\ProjektASPNET\\Projekt1\\DatingApp\\DatingApp-SPA\\node_modules\\ngx-bootstrap\\typeahead\\typeahead-utils.js","mtime":1563772959206},{"path":"E:\\Bakun\\ProjektASPNET\\Projekt1\\DatingApp\\DatingApp-SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Bakun\\ProjektASPNET\\Projekt1\\DatingApp\\DatingApp-SPA\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { latinMap } from './latin-map';\r\nexport function latinize(str) {\r\n    if (!str) {\r\n        return '';\r\n    }\r\n    return str.replace(/[^A-Za-z0-9\\[\\] ]/g, function (a) {\r\n        return latinMap[a] || a;\r\n    });\r\n}\r\nexport function escapeRegexp(queryToEscape) {\r\n    // Regex: capture the whole query string and replace it with the string\r\n    // that will be used to match the results, for example if the capture is\r\n    // 'a' the result will be \\a\r\n    return queryToEscape.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\r\n}\r\n/* tslint:disable */\r\nexport function tokenize(str, wordRegexDelimiters, phraseRegexDelimiters) {\r\n    if (wordRegexDelimiters === void 0) { wordRegexDelimiters = ' '; }\r\n    if (phraseRegexDelimiters === void 0) { phraseRegexDelimiters = ''; }\r\n    /* tslint:enable */\r\n    var regexStr = \"(?:[\" + phraseRegexDelimiters + \"])([^\" + phraseRegexDelimiters + \"]+)\" +\r\n        (\"(?:[\" + phraseRegexDelimiters + \"])|([^\" + wordRegexDelimiters + \"]+)\");\r\n    var preTokenized = str.split(new RegExp(regexStr, 'g'));\r\n    var result = [];\r\n    var preTokenizedLength = preTokenized.length;\r\n    var token;\r\n    var replacePhraseDelimiters = new RegExp(\"[\" + phraseRegexDelimiters + \"]+\", 'g');\r\n    for (var i = 0; i < preTokenizedLength; i += 1) {\r\n        token = preTokenized[i];\r\n        if (token && token.length && token !== wordRegexDelimiters) {\r\n            result.push(token.replace(replacePhraseDelimiters, ''));\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport function getValueFromObject(object, option) {\r\n    if (!option || typeof object !== 'object') {\r\n        return object.toString();\r\n    }\r\n    if (option.endsWith('()')) {\r\n        var functionName = option.slice(0, option.length - 2);\r\n        return object[functionName]().toString();\r\n    }\r\n    var properties = option\r\n        .replace(/\\[(\\w+)\\]/g, '.$1')\r\n        .replace(/^\\./, '');\r\n    var propertiesArray = properties.split('.');\r\n    for (var _i = 0, propertiesArray_1 = propertiesArray; _i < propertiesArray_1.length; _i++) {\r\n        var property = propertiesArray_1[_i];\r\n        if (property in object) {\r\n            // tslint:disable-next-line\r\n            object = object[property];\r\n        }\r\n    }\r\n    if (!object) {\r\n        return '';\r\n    }\r\n    return object.toString();\r\n}\r\n//# sourceMappingURL=typeahead-utils.js.map",null]}